// <auto-generated />
using System;
using System.Collections.Generic;
using Telemedicine.Services.HealthMeasurementDomainService.Core.Entities;
using Telemedicine.Services.HealthMeasurementDomainService.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Telemedicine.Services.HealthMeasurementDomainService.MigrationEfCore.Migrations
{
    [DbContext(typeof(HealthMeasurementDomainServiceDbContext))]
    partial class HealthMeasurementDomainServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Telemedicine.Services.HealthMeasurementDomainService.Core.Entities.BloodPressureMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ClientDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("client_date");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("Diastolic")
                        .HasColumnType("integer")
                        .HasColumnName("diastolic");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<int>("PulseRate")
                        .HasColumnType("integer")
                        .HasColumnName("pulse_rate");

                    b.Property<int>("Systolic")
                        .HasColumnType("integer")
                        .HasColumnName("systolic");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_blood_pressure_measurement");

                    b.HasIndex("PatientId", "ClientDate")
                        .HasDatabaseName("ix_blood_pressure_measurement_patient_id_client_date");

                    b.ToTable("blood_pressure_measurement");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthMeasurementDomainService.Core.Entities.MoodMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ClientDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("client_date");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("Measure")
                        .HasColumnType("integer")
                        .HasColumnName("measure");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_mood_measurement");

                    b.HasIndex("PatientId", "ClientDate")
                        .HasDatabaseName("ix_mood_measurement_patient_id_client_date");

                    b.ToTable("mood_measurement");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthMeasurementDomainService.Core.Entities.PulseRateMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ClientDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("client_date");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<int>("PulseRate")
                        .HasColumnType("integer")
                        .HasColumnName("pulse_rate");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_pulse_rate_measurement");

                    b.HasIndex("PatientId", "ClientDate")
                        .HasDatabaseName("ix_pulse_rate_measurement_patient_id_client_date");

                    b.ToTable("pulse_rate_measurement");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthMeasurementDomainService.Core.Entities.RawSaturationData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<ICollection<RawSaturationItem>>("Items")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("items");

                    b.HasKey("Id")
                        .HasName("pk_saturation_measurement_raw");

                    b.ToTable("saturation_measurement_raw");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthMeasurementDomainService.Core.Entities.SaturationMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ClientDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("client_date");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<decimal>("Pi")
                        .HasColumnType("numeric")
                        .HasColumnName("pi");

                    b.Property<int>("PulseRate")
                        .HasColumnType("integer")
                        .HasColumnName("pulse_rate");

                    b.Property<int>("SpO2")
                        .HasColumnType("integer")
                        .HasColumnName("sp_o2");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_saturation_measurement");

                    b.HasIndex("PatientId", "ClientDate")
                        .HasDatabaseName("ix_saturation_measurement_patient_id_client_date");

                    b.ToTable("saturation_measurement");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthMeasurementDomainService.Core.Entities.RawSaturationData", b =>
                {
                    b.HasOne("Telemedicine.Services.HealthMeasurementDomainService.Core.Entities.SaturationMeasurement", null)
                        .WithOne("RawSaturationData")
                        .HasForeignKey("Telemedicine.Services.HealthMeasurementDomainService.Core.Entities.RawSaturationData", "Id")
                        .HasConstraintName("fk_saturation_measurement_raw_saturation_measurement_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Telemedicine.Services.HealthMeasurementDomainService.Core.Entities.SaturationMeasurement", b =>
                {
                    b.Navigation("RawSaturationData");
                });
#pragma warning restore 612, 618
        }
    }
}
