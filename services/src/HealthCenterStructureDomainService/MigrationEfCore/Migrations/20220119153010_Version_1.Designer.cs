// <auto-generated />
using System;
using Telemedicine.Services.HealthCenterStructureDomainService.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Telemedicine.Services.HealthCenterStructureDomainService.MigrationEfCore.Migrations
{
    [DbContext(typeof(HealthCenterStructureDomainServiceDbContext))]
    [Migration("20220119153010_Version_1")]
    partial class Version_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.InterdisciplinaryTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("InnerId")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("inner_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("health_center_id");

                    b.Property<uint>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_interdisciplinary_team");

                    b.HasIndex("InnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_interdisciplinary_team_inner_id");

                    b.HasIndex("HealthCenterId")
                        .HasDatabaseName("ix_interdisciplinary_team_health_center_id");

                    b.ToTable("interdisciplinary_team");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.HealthCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("InnerId")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("inner_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<uint>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("UsaState")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("usa_state");

                    b.HasKey("Id")
                        .HasName("pk_health_center");

                    b.HasIndex("InnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_health_center_inner_id");

                    b.ToTable("health_center");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("InnerId")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("inner_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<uint>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("FirstName")
                        .HasDatabaseName("ix_user_first_name");

                    b.HasIndex("LastName")
                        .HasDatabaseName("ix_user_last_name");

                    b.HasIndex("InnerId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_inner_id_type");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.DAL.CrossEntities.InterdisciplinaryTeamDoctor", b =>
                {
                    b.Property<Guid>("InterdisciplinaryTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("interdisciplinary_team_id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.HasKey("InterdisciplinaryTeamId", "DoctorId")
                        .HasName("pk_interdisciplinary_team_doctor");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("ix_interdisciplinary_team_doctor_doctor_id");

                    b.ToTable("interdisciplinary_team_doctor");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.DAL.CrossEntities.HealthCenterDoctor", b =>
                {
                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("health_center_id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.HasKey("HealthCenterId", "DoctorId")
                        .HasName("pk_health_center_doctor");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("ix_health_center_doctor_doctor_id");

                    b.ToTable("health_center_doctor");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.Doctor", b =>
                {
                    b.HasBaseType("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.User");

                    b.ToTable("doctor");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.Patient", b =>
                {
                    b.HasBaseType("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.User");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid?>("InterdisciplinaryTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("interdisciplinary_team_id");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("health_center_id");

                    b.Property<Guid?>("PrimaryCareProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("primary_care_provider_id");

                    b.HasIndex("InterdisciplinaryTeamId")
                        .HasDatabaseName("ix_patient_interdisciplinary_team_id");

                    b.HasIndex("HealthCenterId")
                        .HasDatabaseName("ix_patient_health_center_id");

                    b.HasIndex("PrimaryCareProviderId")
                        .HasDatabaseName("ix_patient_primary_care_provider_id");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.InterdisciplinaryTeam", b =>
                {
                    b.HasOne("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.HealthCenter", null)
                        .WithMany()
                        .HasForeignKey("HealthCenterId")
                        .HasConstraintName("fk_interdisciplinary_team_health_center_health_center_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.DAL.CrossEntities.InterdisciplinaryTeamDoctor", b =>
                {
                    b.HasOne("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.InterdisciplinaryTeam", "InterdisciplinaryTeam")
                        .WithMany()
                        .HasForeignKey("InterdisciplinaryTeamId")
                        .HasConstraintName("fk_interdisciplinary_team_doctor_interdisciplinary_t")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("fk_interdisciplinary_team_doctor_doctor_me")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterdisciplinaryTeam");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.DAL.CrossEntities.HealthCenterDoctor", b =>
                {
                    b.HasOne("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("fk_health_center_doctordoctor_docto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.HealthCenter", "HealthCenter")
                        .WithMany()
                        .HasForeignKey("HealthCenterId")
                        .HasConstraintName("fk_health_center_doctor_health_center_health_center_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.Doctor", b =>
                {
                    b.HasOne("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.Doctor", "Id")
                        .HasConstraintName("fk_doctor_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.Patient", b =>
                {
                    b.HasOne("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.Patient", "Id")
                        .HasConstraintName("fk_patient_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.InterdisciplinaryTeam", "InterdisciplinaryTeam")
                        .WithMany()
                        .HasForeignKey("InterdisciplinaryTeamId")
                        .HasConstraintName("fk_patient_interdisciplinary_teams_interdisciplinary_team_")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.HealthCenter", "HealthCenter")
                        .WithMany()
                        .HasForeignKey("HealthCenterId")
                        .HasConstraintName("fk_patient_health_centers_health_center_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Telemedicine.Services.HealthCenterStructureDomainService.Core.Entities.Doctor", "PrimaryCareProvider")
                        .WithMany()
                        .HasForeignKey("PrimaryCareProviderId")
                        .HasConstraintName("fk_patient_doctor_primary_care_provider_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InterdisciplinaryTeam");

                    b.Navigation("HealthCenter");

                    b.Navigation("PrimaryCareProvider");
                });
#pragma warning restore 612, 618
        }
    }
}
